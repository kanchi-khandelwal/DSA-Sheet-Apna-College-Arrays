Approach 1
bool pairInSortedRotated(int arr[], int n, int x)
{
    int i;
    for (i = 0; i < n - 1; i++)
        if (arr[i] > arr[i + 1])   // you can also find pivot here by binary search too and after doing that there will be slight changes in the code
            break;
 
    // l is now index of smallest element
    int l = (i + 1) % n;
 
    // r is now index of largest element
    int r = i;
 
    // Keep moving either l or r till they meet
    while (l != r) {
        if (arr[l] + arr[r] == x)
            return true;
 
        if (arr[l] + arr[r] < x)
            l = (l + 1) % n;    // for making a circular movement
 
        else
            r = (n + r - 1) % n;   // for making a circular movement
    }
    return false;
}

Approach 2 (but idk why some test cases are not passed)

#include <bits/stdc++.h> 
int getPivot(vector<int> &arr, int n)
{
    int s=0, e=n-1;
    int mid=s+(e-s)/2;
    while(s<e)
    {
        if(arr[mid]>=arr[0])
        {
            s=mid+1;
        }
        else
        {
            e=mid;
        }
        mid=s+(e-s)/2;
    }
    return s;
}

int findPairSum(vector<int> arr, int target)
{
    int n=arr.size();
    int pivot=getPivot(arr, n);
    int l=pivot;
    int r=(n+pivot-1)%n;
    while(l!=r)
    {
        if(arr[l]+arr[r]==target)
        {
            return 1;
        }
        else if(arr[l]+arr[r]<target)
        {
            l=(l+1)%n;
        }
        else if(arr[l]+arr[r]>target)
        {
            r=(n+r-1)%n;
        }
    }
    return 0;
}
